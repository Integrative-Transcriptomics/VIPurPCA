from PCA import PCA
from generate_samples import student_grades_data_set, dataset_for_sampling, medical_example_data_set, equipotential_standard_normal, exp_map, sample_input_blobs, sample_input_circles, wisconsin_data_set, streptomyces_data_set, iris_data_set, heart_failure_data_set, easy_example_data_set
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy
from sklearn.preprocessing import normalize
from Animation import gs
import matplotlib.patches as mpatches


if __name__ == '__main__':
    Y, y, cov_Y = student_grades_data_set()
    Y = Y - np.mean(Y, axis=0)
    OUTPUT_FOLDER = '../../results/student_grades/'
    n_features = Y.shape[1]
    pca_student_grades = PCA(matrix=Y, cov_data=cov_Y, n_components=n_features, axis=0, compute_jacobian=True)
    pca_student_grades.pca_grad()
    pca_student_grades.compute_cov_eigenvectors()
    pca_student_grades.compute_cov_eigenvalues()
    print(pca_student_grades.eigenvalues)
    print(pca_student_grades.cov_eigenvalues)

    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)
    ax1.scatter([i for i in range(1, len(pca_student_grades.eigenvalues)+1)], pca_student_grades.eigenvalues)
    ax1.set_xlabel('eigenvalue')
    ax1.set_title('eigenvalues')

    cov_eigenvalues = ax3.imshow(pca_student_grades.cov_eigenvalues, cmap="YlGnBu")
    fig.colorbar(cov_eigenvalues, ax=ax3)
    ax3.set_title('cov matrix eigenvalues')

    eigenvectors = ax2.imshow(pca_student_grades.eigenvectors, cmap="YlGnBu")
    fig.colorbar(eigenvectors, ax=ax2)
    ax2.set_title('eigenvector matrix')

    cov_eigenvectors = ax4.imshow(pca_student_grades.cov_eigenvectors, cmap="YlGnBu")
    fig.colorbar(cov_eigenvectors, ax=ax4)
    ax4.set_title('cov matrix vectorized eigenvectors')

    for ax in [ax2, ax3, ax4]:
        ax.set_xticks([])
        ax.set_yticks([])

    plt.tight_layout()
    plt.savefig('../../results/student_grades/student_grades.png')


    n_samples = 1000
    s = np.random.multivariate_normal([0 for i in range(pca_student_grades.size[1] ** 2)],
                                      np.diag([1 for i in range(pca_student_grades.size[1] ** 2)]), n_samples)
    L = scipy.linalg.cholesky(pca_student_grades.cov_eigenvectors + 1e-6 * np.eye(len(pca_student_grades.cov_eigenvectors)))

    t_array_ours = []
    u_array_ours = []
    for i in s:
        U = np.transpose(np.reshape(np.expand_dims(pca_student_grades.eigenvectors.flatten('F') + np.dot(L, i), axis=1),
                                    [pca_student_grades.n_components, pca_student_grades.size[1]]))

        U = normalize(U, axis=0)
        U = gs(U)

        u_array_ours.append(U)
        t = np.dot(Y, U)
        t_array_ours.append(t)
    t_array_ours = np.stack(t_array_ours)

    fig, ax1 = plt.subplots(1)

    for j in range(Y.shape[0]):
        ax1 = plt.scatter(t_array_ours[:, j, 0], t_array_ours[:, j, 1], edgecolors='w')

    prop_cycle = plt.rcParams['axes.prop_cycle']
    colors = prop_cycle.by_key()['color']
    handles = []
    for i, name in enumerate(y):
        h = mpatches.Patch(color=colors[i], label=name)
        handles.append(h)
    print(handles)

    # ax1.legend(handles=handles)
    plt.savefig('../../results/student_grades/student_grades_map.png')



